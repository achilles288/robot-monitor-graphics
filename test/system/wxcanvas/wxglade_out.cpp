// -*- C++ -*-
//
// generated by wxGlade 0.9.4 on Sat Jul 18 20:22:40 2020
//
// Example for compiling a single file project under Linux using g++:
//  g++ MyApp.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp
//
// Example for compiling a multi file project under Linux using g++:
//  g++ main.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp Dialog1.cpp Frame1.cpp
//

#include "wxglade_out.h"

#include <rmg/config.h>

// begin wxGlade: ::extracode
// end wxGlade



MyFrame::MyFrame(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxFrame(parent, id, title, pos, size, wxDEFAULT_FRAME_STYLE)
{
    // begin wxGlade: MyFrame::MyFrame
    SetSize(wxSize(800, 450));
    SetTitle(wxT("wxCanvas Test"));
    wxIcon _icon;
    _icon.CopyFromBitmap(wxBitmap(wxT(RMG_RESOURCE_PATH "/icons/rmg-app.png")));
    SetIcon(_icon);
    frame_menubar = new wxMenuBar();
    menuFile = new wxMenu();
    itemOpenModel = menuFile->Append(1, wxT("Open Model"), wxEmptyString);
    Bind(wxEVT_MENU, &MyFrame::onOpenModel, this, 1);
    itemOpenTexture = menuFile->Append(2, wxT("Open Texture"), wxEmptyString);
    Bind(wxEVT_MENU, &MyFrame::onOpenTexture, this, 2);
    menuFile->AppendSeparator();
    itemExit = menuFile->Append(3, wxT("Exit"), wxEmptyString);
    Bind(wxEVT_MENU, &MyFrame::onExit, this, 3);
    frame_menubar->Append(menuFile, wxT("File"));
    menuEdit = new wxMenu();
    wxMenu* menuEditModel = new wxMenu();
    itemCreateModel = menuEditModel->Append(4, wxT("Load From File"), wxEmptyString);
    Bind(wxEVT_MENU, &MyFrame::onOpenModel, this, 4);
    itemCreateCube = menuEditModel->Append(5, wxT("Cube"), wxEmptyString);
    Bind(wxEVT_MENU, &MyFrame::onCreateCube, this, 5);
    itemCreateCylinder = menuEditModel->Append(6, wxT("Cylinder"), wxEmptyString);
    Bind(wxEVT_MENU, &MyFrame::onCreateCylinder, this, 6);
    itemCreateSphere = menuEditModel->Append(7, wxT("Sphere"), wxEmptyString);
    Bind(wxEVT_MENU, &MyFrame::onCreateSphere, this, 7);
    menuEdit->Append(wxID_ANY, wxT("Model"), menuEditModel, wxEmptyString);
    wxMenu* menuTransform = new wxMenu();
    menuTransform->Append(8, wxT("Translation"), wxEmptyString);
    Bind(wxEVT_MENU, &MyFrame::onEditTranslation, this, 8);
    menuTransform->Append(9, wxT("Rotation"), wxEmptyString);
    Bind(wxEVT_MENU, &MyFrame::onEditRotation, this, 9);
    menuTransform->Append(10, wxT("Scale"), wxEmptyString);
    Bind(wxEVT_MENU, &MyFrame::onEditScale, this, 10);
    menuEdit->Append(wxID_ANY, wxT("Transform"), menuTransform, wxEmptyString);
    itemEditTexture = menuEdit->Append(11, wxT("Texture"), wxEmptyString);
    Bind(wxEVT_MENU, &MyFrame::onEditTexture, this, 11);
    itemEditLighting = menuEdit->Append(12, wxT("Lighting"), wxEmptyString);
    Bind(wxEVT_MENU, &MyFrame::onEditLighting, this, 12);
    frame_menubar->Append(menuEdit, wxT("Edit"));
    menuView = new wxMenu();
    itemGridView = menuView->Append(13, wxT("Grid View"), wxEmptyString, wxITEM_CHECK);
    Bind(wxEVT_MENU, &MyFrame::onGridView, this, 13);
    frame_menubar->Append(menuView, wxT("View"));
    menuHelp = new wxMenu();
    itemAbout = menuHelp->Append(14, wxT("About"), wxEmptyString);
    Bind(wxEVT_MENU, &MyFrame::onAbout, this, 14);
    frame_menubar->Append(menuHelp, wxT("Help"));
    SetMenuBar(frame_menubar);
    wxBoxSizer* sizer_1 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_2 = new wxBoxSizer(wxVERTICAL);
    sizer_1->Add(sizer_2, 0, wxALL|wxEXPAND, 6);
    btnPan = new wxBitmapButton(this, 101, wxBitmap(wxT(RMG_RESOURCE_PATH "/icons/flat/24/hand.png"), wxBITMAP_TYPE_PNG), wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW|wxBU_EXACTFIT|wxBU_NOTEXT);
    btnPan->SetMinSize(wxSize(42, 42));
    btnPan->SetToolTip(wxT("Pan"));
    sizer_2->Add(btnPan, 0, wxALL, 2);
    btnMove = new wxBitmapButton(this, 102, wxBitmap(wxT(RMG_RESOURCE_PATH "/icons/flat/24/move.png"), wxBITMAP_TYPE_PNG), wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW|wxBU_EXACTFIT|wxBU_NOTEXT);
    btnMove->SetMinSize(wxSize(42, 42));
    btnMove->SetToolTip(wxT("Translates the model"));
    sizer_2->Add(btnMove, 0, wxALL, 2);
    btnRotate = new wxBitmapButton(this, 103, wxBitmap(wxT(RMG_RESOURCE_PATH "/icons/flat/24/rotate.png"), wxBITMAP_TYPE_PNG), wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW|wxBU_EXACTFIT|wxBU_NOTEXT);
    btnRotate->SetMinSize(wxSize(42, 42));
    btnRotate->SetToolTip(wxT("Rotates the model"));
    sizer_2->Add(btnRotate, 0, wxALL, 2);
    btnScale = new wxBitmapButton(this, 104, wxBitmap(wxT(RMG_RESOURCE_PATH "/icons/flat/24/resize.png"), wxBITMAP_TYPE_PNG), wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW|wxBU_EXACTFIT|wxBU_NOTEXT);
    btnScale->SetMinSize(wxSize(42, 42));
    btnScale->SetToolTip(wxT("Scales the model"));
    sizer_2->Add(btnScale, 0, wxALL, 2);
    btnTexture = new wxBitmapButton(this, 105, wxBitmap(wxT(RMG_RESOURCE_PATH "/icons/flat/24/photo.png"), wxBITMAP_TYPE_PNG), wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW|wxBU_EXACTFIT|wxBU_NOTEXT);
    btnTexture->SetMinSize(wxSize(42, 42));
    btnTexture->SetToolTip(wxT("Edits the textural parameters and color"));
    sizer_2->Add(btnTexture, 0, wxALL, 2);
    btnLighting = new wxBitmapButton(this, 106, wxBitmap(wxT(RMG_RESOURCE_PATH "/icons/flat/24/teapot.png"), wxBITMAP_TYPE_PNG), wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW|wxBU_EXACTFIT|wxBU_NOTEXT);
    btnLighting->SetMinSize(wxSize(42, 42));
    btnLighting->SetToolTip(wxT("Adjusts the lighting environment"));
    sizer_2->Add(btnLighting, 0, wxALL, 2);
    canvas = new MyGLCanvas(this);
    sizer_1->Add(canvas, 1, wxEXPAND, 0);
    wxBoxSizer* sizer_3 = new wxBoxSizer(wxVERTICAL);
    sizer_1->Add(sizer_3, 0, wxALL|wxEXPAND, 6);
    wxStaticText* lblEditorPanel = new wxStaticText(this, wxID_ANY, wxT("Editor Panel"));
    sizer_3->Add(lblEditorPanel, 0, 0, 0);
    sizerEditorWidgets = new wxBoxSizer(wxVERTICAL);
    sizer_3->Add(sizerEditorWidgets, 0, wxEXPAND, 0);
    wxBoxSizer* sizer_4 = new wxBoxSizer(wxHORIZONTAL);
    sizerEditorWidgets->Add(sizer_4, 1, wxEXPAND, 0);
    wxStaticText* label_1 = new wxStaticText(this, wxID_ANY, wxT("x"));
    sizer_4->Add(label_1, 0, 0, 0);
    spin_ctrl_double_1 = new wxSpinCtrlDouble(this, wxID_ANY, wxT("0"), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0.0, 100.0);
    spin_ctrl_double_1->SetDigits(2);
    sizer_4->Add(spin_ctrl_double_1, 0, 0, 0);
    wxBoxSizer* sizer_5 = new wxBoxSizer(wxHORIZONTAL);
    sizerEditorWidgets->Add(sizer_5, 1, wxEXPAND, 0);
    wxStaticText* label_2 = new wxStaticText(this, wxID_ANY, wxT("y"));
    sizer_5->Add(label_2, 0, 0, 0);
    spin_ctrl_double_2 = new wxSpinCtrlDouble(this, wxID_ANY, wxT("0.0"), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0.0, 100.0);
    spin_ctrl_double_2->SetDigits(2);
    sizer_5->Add(spin_ctrl_double_2, 0, 0, 0);
    wxBoxSizer* sizer_6 = new wxBoxSizer(wxHORIZONTAL);
    sizerEditorWidgets->Add(sizer_6, 1, wxEXPAND, 0);
    wxStaticText* label_3 = new wxStaticText(this, wxID_ANY, wxT("z"));
    sizer_6->Add(label_3, 0, 0, 0);
    spin_ctrl_double_3 = new wxSpinCtrlDouble(this, wxID_ANY, wxT("0.0"), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0.0, 100.0);
    spin_ctrl_double_3->SetDigits(2);
    sizer_6->Add(spin_ctrl_double_3, 0, 0, 0);
    sizer_3->Add(240, 20, 0, 0, 0);
    
    SetSizer(sizer_1);
    Layout();
    // end wxGlade
}


BEGIN_EVENT_TABLE(MyFrame, wxFrame)
    // begin wxGlade: MyFrame::event_table
    EVT_BUTTON(101, MyFrame::onPan)
    EVT_BUTTON(102, MyFrame::onEditTranslation)
    EVT_BUTTON(103, MyFrame::onEditRotation)
    EVT_BUTTON(104, MyFrame::onEditScale)
    EVT_BUTTON(105, MyFrame::onEditTexture)
    EVT_BUTTON(106, MyFrame::onEditLighting)
    // end wxGlade
END_EVENT_TABLE();


void MyFrame::onOpenModel(wxCommandEvent &event)  // wxGlade: MyFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (MyFrame::onOpenModel) not implemented yet"));
}

void MyFrame::onOpenTexture(wxCommandEvent &event)  // wxGlade: MyFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (MyFrame::onOpenTexture) not implemented yet"));
}

void MyFrame::onExit(wxCommandEvent &event)  // wxGlade: MyFrame.<event_handler>
{
    close(true);
}

void MyFrame::onEditModel(wxCommandEvent &event)  // wxGlade: MyFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (MyFrame::onEditModel) not implemented yet"));
}

void MyFrame::onCreateCube(wxCommandEvent &event)  // wxGlade: MyFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (MyFrame::onCreateCube) not implemented yet"));
}

void MyFrame::onCreateCylinder(wxCommandEvent &event)  // wxGlade: MyFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (MyFrame::onCreateCylinder) not implemented yet"));
}

void MyFrame::onCreateSphere(wxCommandEvent &event)  // wxGlade: MyFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (MyFrame::onCreateSphere) not implemented yet"));
}

void MyFrame::onEditTranslation(wxCommandEvent &event)  // wxGlade: MyFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (MyFrame::onEditTranslation) not implemented yet"));
}

void MyFrame::onEditRotation(wxCommandEvent &event)  // wxGlade: MyFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (MyFrame::onEditRotation) not implemented yet"));
}

void MyFrame::onEditScale(wxCommandEvent &event)  // wxGlade: MyFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (MyFrame::onEditScale) not implemented yet"));
}

void MyFrame::onEditTexture(wxCommandEvent &event)  // wxGlade: MyFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (MyFrame::onEditTexture) not implemented yet"));
}

void MyFrame::onEditLighting(wxCommandEvent &event)  // wxGlade: MyFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (MyFrame::onEditLighting) not implemented yet"));
}

void MyFrame::onGridView(wxCommandEvent &event)  // wxGlade: MyFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (MyFrame::onGridView) not implemented yet"));
}

void MyFrame::onAbout(wxCommandEvent &event)  // wxGlade: MyFrame.<event_handler>
{
    wxMessageBox("This is an RMGraphics wxWidgets port sample",
                 "About rmg::wxCanvas", wxOK | wxICON_INFORMATION );
}

void MyFrame::onPan(wxCommandEvent &event)  // wxGlade: MyFrame.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (MyFrame::onPan) not implemented yet"));
}


// wxGlade: add MyFrame event handlers


class MyApp: public wxApp {
public:
    bool OnInit();
};

IMPLEMENT_APP(MyApp)

bool MyApp::OnInit()
{
    wxInitAllImageHandlers();
    MyFrame* frame = new MyFrame(NULL, wxID_ANY, wxEmptyString);
    SetTopWindow(frame);
    frame->Show();
    return true;
}
